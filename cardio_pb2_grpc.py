# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import cardio_pb2 as cardio__pb2


class CardioServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamCardioData = channel.unary_stream(
                '/cardio.CardioService/StreamCardioData',
                request_serializer=cardio__pb2.CardioRequest.SerializeToString,
                response_deserializer=cardio__pb2.CardioData.FromString,
                )
        self.SetWorkingDirectory = channel.unary_unary(
                '/cardio.CardioService/SetWorkingDirectory',
                request_serializer=cardio__pb2.SetWorkingDirectoryRequest.SerializeToString,
                response_deserializer=cardio__pb2.SetWorkingDirectoryResponse.FromString,
                )
        self.SetFileToProcess = channel.unary_unary(
                '/cardio.CardioService/SetFileToProcess',
                request_serializer=cardio__pb2.SetFileToProcessRequest.SerializeToString,
                response_deserializer=cardio__pb2.SetFileToProcessResponse.FromString,
                )


class CardioServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamCardioData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetWorkingDirectory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFileToProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CardioServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamCardioData': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamCardioData,
                    request_deserializer=cardio__pb2.CardioRequest.FromString,
                    response_serializer=cardio__pb2.CardioData.SerializeToString,
            ),
            'SetWorkingDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWorkingDirectory,
                    request_deserializer=cardio__pb2.SetWorkingDirectoryRequest.FromString,
                    response_serializer=cardio__pb2.SetWorkingDirectoryResponse.SerializeToString,
            ),
            'SetFileToProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFileToProcess,
                    request_deserializer=cardio__pb2.SetFileToProcessRequest.FromString,
                    response_serializer=cardio__pb2.SetFileToProcessResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cardio.CardioService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CardioService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamCardioData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cardio.CardioService/StreamCardioData',
            cardio__pb2.CardioRequest.SerializeToString,
            cardio__pb2.CardioData.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetWorkingDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cardio.CardioService/SetWorkingDirectory',
            cardio__pb2.SetWorkingDirectoryRequest.SerializeToString,
            cardio__pb2.SetWorkingDirectoryResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetFileToProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cardio.CardioService/SetFileToProcess',
            cardio__pb2.SetFileToProcessRequest.SerializeToString,
            cardio__pb2.SetFileToProcessResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
